from aiogram import Router, Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import requests
from sqlalchemy import select

import config
import handlers.utils
from database.db import User, async_session

API_TOKEN = config.TOKEN
CRYPTO_TOKEN = config.CRYPTO_TOKEN
bot = Bot(token=API_TOKEN)
router = Router()

invoices = {}


async def get_pay_link(amount):
    headers = {"Crypto-Pay-API-Token": CRYPTO_TOKEN}
    data = {"asset": "USDT", "amount": amount}

    try:
        response = requests.post('https://pay.crypt.bot/api/createInvoice', headers=headers, json=data)
        if response.ok:
            response_data = response.json()
            return response_data['result']['pay_url'], response_data['result']['invoice_id'], amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {response.status_code}, {response.text}")
            return None, None, None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return None, None, None


async def check_payment_status(invoice_id):
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_TOKEN,
        "Content-Type": "application/json"
    }
    try:
        response = requests.post('https://pay.crypt.bot/api/getInvoices', headers=headers, json={})
        if response.ok:
            return response.json()
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        return None


async def update_user_balance(tg_id, amount):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()

        if user:
            user.balance += amount
            user.all_deps += amount

            if user.promocode:
                try:
                    ref_result = await session.execute(select(User).where(User.tg_id == int(user.promocode)))
                    ref_user = ref_result.scalar_one_or_none()

                    if ref_user:
                        bonus = round(amount * 0.15, 3)
                        ref_user.balance += bonus

                        try:
                            await bot.send_message(ref_user.tg_id,
                                f'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus} USDT</b> –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!',
                                parse_mode='HTML', reply_markup=handlers.utils.ponyal_kb)
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É: {e}")

                except ValueError:
                    print("–û—à–∏–±–∫–∞: promocode –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (tg_id)")

            await session.commit()
            return True
        return False


@router.callback_query(F.data == 'depozit')
async def recharge_balance(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='3.0 USDT', callback_data='3.0'),
         InlineKeyboardButton(text='5.0 USDT', callback_data='5.0')],
        [InlineKeyboardButton(text='10.0 USDT', callback_data='10.0'),
         InlineKeyboardButton(text='25.0 USDT', callback_data='25.0')],
        [InlineKeyboardButton(text='50.0 USDT', callback_data='50.0')],
        [InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é', callback_data='custom_amount')],
        [InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back_to_main_menu')]
    ])
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
    await callback.message.edit_caption(caption=text, reply_markup=kb, parse_mode='HTML')
    await state.clear()


class DepositState(StatesGroup):
    waiting_for_amount = State()


@router.callback_query(F.data == 'custom_amount')
async def ask_for_custom_amount(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='depozit')]
    ])
    await callback.message.edit_caption(
        caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>7.5</b>",
        parse_mode='HTML',
        reply_markup=kb
    )
    await state.set_state(DepositState.waiting_for_amount)

    await state.update_data(bot_message_id=callback.message.message_id)


@router.message(DepositState.waiting_for_amount)
async def process_custom_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 1.0:
            await message.delete()
            await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 1.0 USDT.", reply_markup=handlers.utils.ponyal_kb)
            return

        await message.delete()

        data = await state.get_data()
        bot_msg_id = data.get("bot_message_id")

        await message.bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_msg_id,
            caption=f'–°–æ–∑–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã...',
            parse_mode='HTML'
        )

        pay_link, invoice_id, amount = await get_pay_link(amount)
        if pay_link and invoice_id:
            invoices[message.chat.id] = {'invoice_id': invoice_id, 'amount': amount}
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT', url=pay_link)],
                [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment_{invoice_id}')],
                [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='depozit')]
            ])
            if bot_msg_id:
                await message.bot.edit_message_caption(
                    chat_id=message.chat.id,
                    message_id=bot_msg_id,
                    caption=f'–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{amount} USDT</b>:',
                    reply_markup=kb,
                    parse_mode='HTML'
                )
            else:
                # fallback: –µ—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
                sent = await message.answer(f'–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{amount} USDT</b>:', reply_markup=kb, parse_mode='HTML')
                await state.update_data(bot_message_id=sent.message_id)
        else:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=handlers.utils.ponyal_kb)

        await state.clear()

    except ValueError:
        await message.delete()
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5)", reply_markup=handlers.utils.ponyal_kb)


@router.callback_query(F.data.in_(['3.0', '5.0', '10.0', '25.0', '50.0']))
async def process_payment(callback: CallbackQuery):
    amount = float(callback.data)
    chat_id = callback.message.chat.id
    pay_link, invoice_id, amount = await get_pay_link(amount)

    if pay_link and invoice_id:
        invoices[chat_id] = {'invoice_id': invoice_id, 'amount': amount}
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT', url=pay_link)],
            [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment_{invoice_id}')],
            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='depozit')]
        ])
        text = f'–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{amount} USDT</b>:'
        await callback.message.edit_caption(caption=text, reply_markup=kb, parse_mode='HTML')
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back_to_main_menu')]
        ])
        text = '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <b>@semyonsk</b>'
        await callback.message.edit_caption(caption=text, reply_markup=kb, parse_mode='HTML')


@router.callback_query(lambda call: call.data.startswith('check_payment_'))
async def check_payment(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    invoice_id = callback.data.split('check_payment_')[1]

    payment_status = await check_payment_status(invoice_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back_to_main_menu')]
    ])
    if payment_status and payment_status.get('ok'):
        if 'items' in payment_status['result']:
            invoice = next((inv for inv in payment_status['result']['items'] if str(inv['invoice_id']) == invoice_id),
                           None)
            if invoice:
                status = invoice['status']
                if status == 'paid':
                    # –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    amount = invoices.get(chat_id, {}).get('amount', 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É
                    if amount:
                        success = await update_user_balance(chat_id, amount)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å
                        if success:
                            await callback.message.edit_caption(
                                caption=f'–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{amount} USDT</b>.',
                                reply_markup=kb, parse_mode='HTML')
                        else:
                            await callback.message.edit_caption(caption='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å.',
                                                             reply_markup=kb, parse_mode='HTML')
                    else:
                        await callback.message.edit_caption(caption='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.',
                                                         reply_markup=kb, parse_mode='HTML')
                else:
                    await callback.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', show_alert=True)
            else:
                await callback.answer('–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)
        else:
            await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
    else:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.', show_alert=True)
