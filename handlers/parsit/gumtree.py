import os

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery, InputFile
from sqlalchemy import delete
from sqlalchemy.future import select
from datetime import datetime, timedelta
import config
import database.requests as rq
import handlers.utils
from database.db import async_session, User, Preset, GUMTREE, engine
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

router = Router()
router.message.filter(F.chat.type == 'private')
API_TOKEN = config.TOKEN

bot = Bot(token=API_TOKEN)


@router.callback_query(F.data == 'parse_gumtree')
async def parse_gumtree(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(select(User).filter_by(tg_id=tg_id))
        user = result.scalars().first()

        if user and user.preset_id:
            preset_result = await session.execute(select(Preset).filter_by(id=user.preset_id))
            preset = preset_result.scalars().first()

            if preset:
                def f(value):
                    return value if value is not None else "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä"

                caption = (
                    f"<b>üáøüá¶ GUMTREE.CO.ZA\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–µ—Å–µ—Ç:\n\n"
                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞: {preset.name}\n"
                    f"üí∂ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã: {f(preset.price_diapazone)}\n"
                    f"üïí –ú–∏–Ω –¥–∞—Ç–∞ —Ä–µ–≥. –ø—Ä–æ–¥–∞–≤—Ü–∞: {f(preset.min_reg_day)}\n"
                    f"üïí –ú–∞–∫—Å –¥–∞—Ç–∞ —Ä–µ–≥. –ø—Ä–æ–¥–∞–≤—Ü–∞: {f(preset.max_reg_day)}\n"
                    f"üëÄÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: {f(preset.max_views)}\n"
                    f"üóÇÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞: {f(preset.max_posts)}\n"
                    f"üóÇÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–º: {f(preset.max_sold)}\n"
                    f"üóÇÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–º: {f(preset.max_bought)}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>"
                )

                today = datetime.today()
                yesterday = today - timedelta(days=1)
                two_days_ago = today - timedelta(days=2)
                three_days_ago = today - timedelta(days=3)

                today_str = today.strftime("%Y-%m-%d")
                yesterday_str = yesterday.strftime("%Y-%m-%d")
                two_days_ago_str = two_days_ago.strftime("%Y-%m-%d")
                three_days_ago_str = three_days_ago.strftime("%Y-%m-%d")

                choosed_preset = f'üíæ –ü—Ä–µ—Å–µ—Ç: {preset.name}'

                date_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=today_str, callback_data=f"gumtree_parse_date_{today_str}"),
                     InlineKeyboardButton(text=yesterday_str, callback_data=f"gumtree_parse_date_{yesterday_str}")],
                    [InlineKeyboardButton(text=two_days_ago_str, callback_data=f"gumtree_parse_date_{two_days_ago_str}"),
                     InlineKeyboardButton(text=three_days_ago_str, callback_data=f"gumtree_parse_date_{three_days_ago_str}")],
                    [InlineKeyboardButton(text=choosed_preset, callback_data='choose_another_preset')],
                    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='parse_menu')]
                ])

                await callback.message.edit_caption(
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=date_kb
                )
            else:
                await callback.answer("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def calculate_available_items(preset, user, selected_date=None):
    filters = []

    if preset.min_reg_day:
        filters.append(GUMTREE.reg_date >= preset.min_reg_day)
    if preset.max_reg_day:
        filters.append(GUMTREE.reg_date <= preset.max_reg_day)

    if preset.price_diapazone:
        price_min, price_max = map(int, preset.price_diapazone.split('-'))
        filters.append(GUMTREE.price >= price_min)
        filters.append(GUMTREE.price <= price_max)

    if preset.max_views is not None:
        filters.append(GUMTREE.views <= preset.max_views)
    if preset.max_posts is not None:
        filters.append(GUMTREE.items_count <= preset.max_posts)
    if preset.max_sold is not None:
        filters.append(GUMTREE.items_sold <= preset.max_sold)
    if preset.max_bought is not None:
        filters.append(GUMTREE.items_bought <= preset.max_bought)

    if user.only_with_numbers:
        filters.append(GUMTREE.is_phone_number == True)
    if user.only_with_delivery:
        filters.append(GUMTREE.delivery == True)
    if user.find_without_rating:
        filters.append(GUMTREE.has_rating == False)

    if selected_date:
        filters.append(GUMTREE.parse_date == selected_date)

    print(f"Filters applied: {filters}")

    if filters:
        async with async_session() as session:
            query = select(GUMTREE).filter(*filters)
            result = await session.execute(query)
            ads = result.scalars().all()

            print(f"Filtered ads count: {len(ads)}")
            for ad in ads:
                print(f"Ad ID: {ad.id}, items_count: {ad.items_count}, items_sold: {ad.items_sold}, items_bought: {ad.items_bought}, price: {ad.price}")

            available_items = len(ads)

            print(f"Available items count: {available_items}")
            return available_items
    else:
        print("No filters applied, returning all items.")
        async with async_session() as session:
            result = await session.execute(select(GUMTREE))
            ads = result.scalars().all()

            available_items = len(ads)

            return available_items



class Form(StatesGroup):
    waiting_for_quantity = State()


@router.callback_query(F.data.startswith("gumtree_parse_date_"))
async def parse_date_gumtree(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id

    selected_date = callback.data.split("_")[3]

    async with async_session() as session:
        result = await session.execute(select(User).filter_by(tg_id=tg_id))
        user = result.scalars().first()

        if user and user.preset_id:
            preset_result = await session.execute(select(Preset).filter_by(id=user.preset_id))
            preset = preset_result.scalars().first()

            if preset:
                await state.update_data(selected_date=selected_date)

                if selected_date == datetime.today().strftime("%Y-%m-%d"):
                    base_price = 0.003
                elif selected_date == (datetime.today() - timedelta(days=1)).strftime("%Y-%m-%d"):
                    base_price = 0.002
                elif selected_date == (datetime.today() - timedelta(days=2)).strftime("%Y-%m-%d"):
                    base_price = 0.001
                elif selected_date == (datetime.today() - timedelta(days=3)).strftime("%Y-%m-%d"):
                    base_price = 0
                else:
                    base_price = 0

                price_per_ad = round(base_price, 3)

                available_items = await calculate_available_items(preset, user, selected_date)

                caption = (
                    f"<b>–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {price_per_ad} USDT\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–∫—É–ø–∫–µ: {available_items}\n"
                    f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_date}\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {await rq.get_balance_by_tg_id(callback.from_user.id)}</b>\n"
                    f"*–¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ—Å–µ—Ç–∞\n\n"
                    f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>"
                )

                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='parse_gumtree')]
                ])

                sent_message = await callback.message.edit_caption(
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=markup
                )

                await state.update_data(message_id=sent_message.message_id)
                await state.update_data(price_per_ad=price_per_ad)
                await state.update_data(selected_date=selected_date)
                await state.set_state(Form.waiting_for_quantity)

            else:
                await callback.answer("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")



@router.message(Form.waiting_for_quantity)
async def handle_quantity_input(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)

        await state.update_data(quantity=quantity)

        tg_id = message.from_user.id

        async with async_session() as session:
            result = await session.execute(select(User).filter_by(tg_id=tg_id))
            user = result.scalars().first()
            if user and user.preset_id:
                preset_result = await session.execute(select(Preset).filter_by(id=user.preset_id))
                preset = preset_result.scalars().first()

                if preset:
                    available_items = await calculate_available_items(preset, user)
                    if quantity <= available_items:
                        user_data = await state.get_data()
                        message_id = user_data.get('message_id')
                        price_per_ad = user_data.get('price_per_ad')
                        total_price = quantity * price_per_ad

                        await state.update_data(total_price=total_price)

                        caption = (
                            f"<b>–ö –æ–ø–ª–∞—Ç–µ: {total_price} USDT</b>\n"
                            f"<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.</b>"
                        )

                        markup = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {total_price} USDT', callback_data='gumtree_pay')],
                            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='parse_gumtree')]
                        ])

                        if message_id:
                            await message.bot.edit_message_caption(
                                chat_id=message.chat.id,
                                message_id=message_id,
                                caption=caption,
                                parse_mode='HTML',
                                reply_markup=markup
                            )

                            await message.delete()

                    else:
                        await message.answer(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤. –í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ {available_items} —Ç–æ–≤–∞—Ä–æ–≤.")
                else:
                    await message.answer("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


async def save_ads_to_txt_and_remove(preset, user, selected_date=None, num_to_write=10):
    filters = []

    if preset.min_reg_day:
        filters.append(GUMTREE.reg_date >= preset.min_reg_day)
    if preset.max_reg_day:
        filters.append(GUMTREE.reg_date <= preset.max_reg_day)

    if preset.price_diapazone:
        price_min, price_max = map(int, preset.price_diapazone.split('-'))
        filters.append(GUMTREE.price >= price_min)
        filters.append(GUMTREE.price <= price_max)

    if preset.max_views is not None:
        filters.append(GUMTREE.views <= preset.max_views)
    if preset.max_posts is not None:
        filters.append(GUMTREE.items_count <= preset.max_posts)
    if preset.max_sold is not None:
        filters.append(GUMTREE.items_sold <= preset.max_sold)
    if preset.max_bought is not None:
        filters.append(GUMTREE.items_bought <= preset.max_bought)

    if user.only_with_numbers:
        filters.append(GUMTREE.is_phone_number == True)
    if user.only_with_delivery:
        filters.append(GUMTREE.delivery == True)
    if user.find_without_rating:
        filters.append(GUMTREE.has_rating == False)

    if selected_date:
        filters.append(GUMTREE.parse_date == selected_date)

    print(f"Filters applied: {filters}")

    async with async_session() as session:
        query = select(GUMTREE).filter(*filters)
        result = await session.execute(query)
        ads = result.scalars().all()

        print(f"Filtered ads count: {len(ads)}")

        ads_to_write = ads[:num_to_write]

        with open("–æ–±—ä—è–≤–ª–µ–Ω–∏—è.txt", "a") as file:
            for ad in ads_to_write:
                if ad.phone_number:
                    phone_number = ad.phone_number.replace(" ", "")
                    line = f"{ad.link}, +27{phone_number}\n"
                else:
                    line = f"{ad.link}\n"

                file.write(line)

                await session.execute(delete(GUMTREE).where(GUMTREE.id == ad.id))
            await session.commit()

        print(f"Written {len(ads_to_write)} ads to file and removed from DB.")


@router.callback_query(F.data == 'gumtree_pay')
async def handle_payment(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    user_data = await state.get_data()
    selected_date = user_data.get('selected_date')
    quantity = user_data.get('quantity')
    total_price = user_data.get('total_price')

    async with async_session() as session:
        result = await session.execute(select(User).filter_by(tg_id=tg_id))
        user = result.scalars().first()

        if user and user.preset_id:
            preset_result = await session.execute(select(Preset).filter_by(id=user.preset_id))
            preset = preset_result.scalars().first()

            new_balance = user.balance - total_price
            if new_balance < 0:
                await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return

            await rq.minus_balik(tg_id, total_price)

        await save_ads_to_txt_and_remove(preset, user, selected_date, num_to_write=quantity)

        text = f"<b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {round(new_balance, 3)} USDT.</b>"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='back_to_main_menu')]
        ])

        await callback.message.edit_caption(caption=text, reply_markup=markup, parse_mode='HTML')

        file_path = "–æ–±—ä—è–≤–ª–µ–Ω–∏—è.txt"

        input_file = FSInputFile(file_path)

        with open(file_path, 'rb') as file:
            await callback.message.answer_document(input_file, reply_markup=handlers.utils.delete_kb)

        os.remove(file_path)